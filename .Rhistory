facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
ggsave(filename = 'figures/fore_catch_close_fleet.jpg', width = 190, height = 150, dpi = 500, units = 'mm')
# Read base model:
base_model = SS_output(dir = file.path(model_name, 'projection'), repfile = 'Reportc1.0.sso', compfile = 'CompReportc1.0.sso')
# Fleet name information:
fleet_info = data.frame(fleet_number = 1:21,
area = base_model$fleet_area[1:21],
fleet_name = c('GI', 'HD', 'LL1a', 'OT', 'BB', 'FS', 'LL1b', 'LS', 'TR', 'LL', 'FS', 'LS', 'TR', 'LL', 'GI', 'LL', 'OT', 'TR', 'FS', 'LS', 'LF'))
# Forecast catch by season: --------------------------
fore_catch = base_model$catch %>% filter(Yr %in% 293:296) %>% select(Fleet, Yr, Obs)
fore_catch = fore_catch %>% mutate(season = Yr - 292, Name = fleet_info$fleet_name[match(fore_catch$Fleet, fleet_info$fleet_number)],
Area = fleet_info$area[match(fore_catch$Fleet, fleet_info$fleet_number)]) # plot by REAL season
fore_catch = fore_catch %>% mutate(fleet_label = paste(Fleet, Area, Name, sep = '_'))
fore_catch$fleet_label = factor(fore_catch$fleet_label, levels = unique(fore_catch$fleet_label))
ggplot(data = fore_catch, aes(x = factor(season), y = Obs)) +
geom_col() +
theme_bw() +
facet_wrap(~factor(fleet_label), ncol = 5, scales = 'free_y')
ggsave(filename = 'figures/fore_catch.jpg', width = 170, height = 160, dpi = 500, units = 'mm')
tmp_df = all_df2 %>% group_by(Yr2, cfleet, cseason, factor, strat, fleet) %>% summarise(catch = sum(catch))
all_seasons = unique(plot_df$cseason)
k = 1
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
plot_df = plot_df %>% filter(cfleet == fleet)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
ggsave(filename = 'figures/fore_catch_close_fleet.jpg', width = 190, height = 150, dpi = 500, units = 'mm')
plot_df
plot_df %>% filter(cfleet == '21')
k = 2
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
plot_df = plot_df %>% filter(cfleet == fleet)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
k = 2
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
plot_df = plot_df %>% filter(cfleet == fleet)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
plot_df
all_seasons[k]
all_seasons
tmp_df = all_df2 %>% group_by(Yr2, cfleet, cseason, factor, strat, fleet) %>% summarise(catch = sum(catch))
all_seasons = unique(plot_df$cseason)
all_seasons
load('outputs/all_df1.RData') # SSB data
load('outputs/all_df2.RData') # Catch data
load('outputs/all_df3.RData') # Kobe data
tmp_df = all_df2 %>% group_by(Yr2, cfleet, cseason, factor, strat, fleet) %>% summarise(catch = sum(catch))
all_seasons = unique(plot_df$cseason)
all_seasons
all_df2
tmp_df = all_df2 %>% group_by(Yr2, cfleet, cseason, factor, strat, fleet) %>% summarise(catch = sum(catch))
tmp_df
all_seasons = unique(tmp_df$cseason)
k = 2
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
plot_df = plot_df %>% filter(cfleet == fleet)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
ggsave(filename = 'figures/fore_catch_close_fleet.jpg', width = 190, height = 150, dpi = 500, units = 'mm')
all_seasons
# Plot season by season, fleet by fleet:
for(k in seq_along(all_seasons)) {
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
plot_df = plot_df %>% filter(cfleet == fleet)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
ggsave(filename = paste0('figures/fore_catch_closeByFleet_season_', all_seasons[k],'.jpg'), width = 190, height = 150, dpi = 500, units = 'mm')
}
base_model
tmp_df = base_model$timeseries
tmp2 = tmp_df[,c(2, grep(pattern = 'dead\\(B\\):_', x = colnames(tmp_df)))]
tmp3 = tmp2 %>% group_by(Yr) %>% summarise(across(everything(), list(sum)))
tmp3
tmp3 %>% filter(Yr > 297)
tmp3 %>% filter(Yr > 296)
View(tmp3 %>% filter(Yr > 296))
View(tmp3 %>% filter(Yr > 292))
base_model$catch
base_model$catch %>% filter(Yr > 292)
base_model$catch %>% filter(Yr > 292)
View(base_model$catch %>% filter(Yr > 292))
View(base_model$catch %>% filter(Yr > 292))
base_model$derived_quants
base_model$catage
base_model$catch
# Read base model:
base_model = SS_output(dir = file.path(model_name, 'projection'), repfile = 'Reportc1.0.sso', compfile = 'CompReportc1.0.sso',
forefile = 'Forecast-reportc1.0.sso')
base_model$catch
View(base_model$catch %>% filter(Yr > 292))
base_model$forecast_selectivity
base_model$catch_units
base_model$catch
base_model2 = SS_output(dir = file.path(model_name, 'projection'), repfile = 'Reportc0.6.sso', compfile = 'CompReportc0.6.sso',
forefile = 'Forecast-reportc0.6.sso')
tmp_df = base_model$timeseries
tmp2 = tmp_df[,c(2, grep(pattern = 'dead\\(B\\):_', x = colnames(tmp_df)))]
tmp3 = tmp2 %>% group_by(Yr) %>% summarise(across(everything(), list(sum)))
View(tmp3 %>% filter(Yr > 292))
tmp_dfa = base_model2$timeseries
tmp2a = tmp_dfa[,c(2, grep(pattern = 'dead\\(B\\):_', x = colnames(tmp_dfa)))]
tmp3a = tmp2a %>% group_by(Yr) %>% summarise(across(everything(), list(sum)))
View(tmp3a %>% filter(Yr > 292))
2433.0*0.6
head(tmp_df)
tmp_df = base_model$timeseries
tmp2 = tmp_df[,c(2, grep(pattern = 'retain\\(B\\):_', x = colnames(tmp_df)))]
tmp3 = tmp2 %>% group_by(Yr) %>% summarise(across(everything(), list(sum)))
View(tmp3 %>% filter(Yr > 292))
tmp_df = base_model$timeseries
tmp2 = tmp_df[,c(2, grep(pattern = 'sel\\(B\\):_', x = colnames(tmp_df)))]
tmp3 = tmp2 %>% group_by(Yr) %>% summarise(across(everything(), list(sum)))
View(tmp3 %>% filter(Yr > 292))
tmp_df = base_model$timeseries
tmp2 = tmp_df[,c(2, grep(pattern = 'dead\\(B\\):_', x = colnames(tmp_df)))]
tmp3 = tmp2 %>% group_by(Yr) %>% summarise(across(everything(), list(sum)))
View(tmp3 %>% filter(Yr > 292))
tmp_df = all_df2 %>% group_by(Yr2, cfleet, cseason, factor, strat, fleet) %>% summarise(catch = sum(catch))
all_seasons = unique(tmp_df$cseason)
# Read base model:
base_model = SS_output(dir = file.path(model_name, 'projection'), repfile = 'Reportc1.0.sso', compfile = 'CompReportc1.0.sso',
forefile = 'Forecast-reportc1.0.sso')
# Fleet name information:
fleet_info = data.frame(fleet_number = 1:21,
area = base_model$fleet_area[1:21],
fleet_name = c('GI', 'HD', 'LL1a', 'OT', 'BB', 'FS', 'LL1b', 'LS', 'TR', 'LL', 'FS', 'LS', 'TR', 'LL', 'GI', 'LL', 'OT', 'TR', 'FS', 'LS', 'LF'))
# Forecast catch by season: --------------------------
fore_catch = base_model$catch %>% filter(Yr %in% 293:296) %>% select(Fleet, Yr, Obs)
fore_catch = fore_catch %>% mutate(season = Yr - 292, Name = fleet_info$fleet_name[match(fore_catch$Fleet, fleet_info$fleet_number)],
Area = fleet_info$area[match(fore_catch$Fleet, fleet_info$fleet_number)]) # plot by REAL season
fore_catch = fore_catch %>% mutate(fleet_label = paste(Fleet, Area, Name, sep = '_'))
fore_catch$fleet_label = factor(fore_catch$fleet_label, levels = unique(fore_catch$fleet_label))
ggplot(data = fore_catch, aes(x = factor(season), y = Obs)) +
geom_col() +
theme_bw() +
facet_wrap(~factor(fleet_label), ncol = 6, scales = 'free_y')
ggsave(filename = 'figures/fore_catch.jpg', width = 170, height = 140, dpi = 500, units = 'mm')
# Size selectivity (last season): --------------------------
size_selex = base_model$sizeselex %>% filter(Yr == 296, Fleet %in% 1:21, Factor == 'Lsel')
size_selex = tidyr::gather(size_selex, 'Bin', 'Selex', 6:53) %>% select('Yr', 'Fleet', 'Bin', 'Selex')
size_selex = size_selex %>% mutate(Name = fleet_info$fleet_name[match(size_selex$Fleet, fleet_info$fleet_number)],
Area = fleet_info$area[match(size_selex$Fleet, fleet_info$fleet_number)])
size_selex = size_selex %>% mutate(fleet_label = paste(Fleet, Area, Name, sep = '_'))
size_selex$fleet_label = factor(size_selex$fleet_label, levels = unique(size_selex$fleet_label))
size_selex$Bin = as.numeric(size_selex$Bin)
ggplot(data = size_selex, aes(x = Bin, y = Selex)) +
geom_line() +
geom_vline(xintercept = 74.721, color = 'red', linetype="dashed") +
theme_bw() +
theme(legend.position = c(0.8, 0.15)) +
facet_wrap(~factor(fleet_label), ncol = 6)
ggsave(filename = 'figures/size_selex.jpg', width = 170, height = 140, dpi = 500, units = 'mm')
# Age selectivity (last season): --------------------------
age_selex = base_model$ageselex %>% filter(Yr == 296, Fleet %in% 1:21, Factor == 'Asel')
age_selex = tidyr::gather(age_selex, 'Bin', 'Selex', 8:36) %>% select('Yr', 'Fleet', 'Bin', 'Selex')
age_selex = age_selex %>% mutate(Name = fleet_info$fleet_name[match(age_selex$Fleet, fleet_info$fleet_number)],
Area = fleet_info$area[match(age_selex$Fleet, fleet_info$fleet_number)])
age_selex = age_selex %>% mutate(fleet_label = paste(Fleet, Area, Name, sep = '_'))
age_selex$fleet_label = factor(age_selex$fleet_label, levels = unique(age_selex$fleet_label))
age_selex$Bin = as.numeric(age_selex$Bin)
ggplot(data = age_selex, aes(x = Bin, y = Selex)) +
geom_line() +
geom_vline(xintercept = 9, color = 'red', linetype="dashed") +
theme_bw() +
theme(legend.position = c(0.8, 0.15)) +
facet_wrap(~factor(fleet_label), ncol = 6)
ggsave(filename = 'figures/age_selex.jpg', width = 170, height = 140, dpi = 500, units = 'mm')
unique(tmp_df$cseason)
all_seasons = c(1:4, 'all')
all_seasons
all_seasons
k = 5
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
plot_df
all_seasons = as.character(c(1:4)()
all_seasons = as.character(c(1:4))
all_seasons
k = 1
plot_df = tmp_df %>% filter(cseason == all_seasons[k])
df1 = plot_df %>% filter(cfleet == fleet)
df1
unique(plot_df$cfleet)
df0 = tmp_df %>% filter(cseason == all_seasons[k])
df1 = df0 %>% filter(cfleet == fleet)
df2 = df0 %>% filter(cfleet == 'all')
plot_df = rbind(df1, df2)
plot_df
std_fleet_order
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
k = 1
df0 = tmp_df %>% filter(cseason == all_seasons[k])
df1 = df0 %>% filter(cfleet == fleet)
df2 = df0 %>% filter(cfleet == 'all')
plot_df = rbind(df1, df2)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
View(df2)
df0 %>% filter(cfleet == 'all')
df0 %>% filter(cfleet == fleet)
df0 = tmp_df %>% filter(cseason == all_seasons[k])
df1 = df0 %>% filter(cfleet == fleet) %>% select(Yr2, cfleet, cseason, factor, strat, catch)
df1
df2 = df0 %>% filter(cfleet == 'all') %>% group_by(Yr2, cfleet, cseason, factor, strat) %>% summarise(catch = sum(catch)) # sum over fleets
df2
plot_df = rbind(df1, df2)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
# Plot season by season, fleet by fleet:
for(k in seq_along(all_seasons)) {
df0 = tmp_df %>% filter(cseason == all_seasons[k])
df1 = df0 %>% filter(cfleet == fleet) %>% select(Yr2, cfleet, cseason, factor, strat, catch)
df2 = df0 %>% filter(cfleet == 'all') %>% group_by(Yr2, cfleet, cseason, factor, strat) %>% summarise(catch = sum(catch)) # sum over fleets
plot_df = rbind(df1, df2)
plot_df$cfleet = factor(plot_df$cfleet, levels = std_fleet_order)
ggplot(data = plot_df, aes(x = Yr2, y = catch*1e-03)) +
geom_line() +
xlab(NULL) + ylab('Catch (thousands of tons)') +
coord_cartesian(ylim = c(0 ,NA)) +
theme_bw() +
labs(color = NULL) +
scale_x_continuous(breaks = c(2022, 2025, 2028), labels = c(2022, 2025, 2028)) +
facet_wrap(.~cfleet, ncol = 6, scales = 'free_y')
ggsave(filename = paste0('figures/fore_catch_closeByFleet_season_', all_seasons[k],'.jpg'), width = 190, height = 150, dpi = 500, units = 'mm')
}
source(file.path('code', "make_basic_info.R"))
setwd("~/GitHub/AKWHAM_sim/code")
source("make_basic_info.R")
setwd("C:/Use/GitHub/AKWHAM_sim")
# Set working directory:
setwd("C:/Use/GitHub/AKWHAM_sim")
# Load auxiliary functions:
source(file.path('code', "make_basic_info.R"))
# folder to write dfom and dfem
write.dir = "inputs"
# OM parameters:
Ecov_obs_sig <- c(0.1) # obs error variance for Ecov
# OM parameters:
Ecov_obs_sig = c(0.1) # obs error variance for Ecov
exp(0)
exp(0.1)
log(0.1)
# OM parameters:
Ecov_obs_sig = c(0.1) # obs error variance for Ecov
Ecov_re_sig = c(0.1) # Ecov process error variance
Ecov_re_cor <- c(0) # Ecov process error autocorrelation
Ecov_effect <- c(0.5) # Effect on selected parameter (Beta)
# OM parameters:
Ecov_obs_sig = c(0.1) # obs error variance for Ecov
Ecov_re_sig = c(0.1) # Ecov process error variance
Ecov_re_cor <- c(0) # Ecov process error autocorrelation
Ecov_effect <- c(0.5) # Effect on selected parameter (Beta)
growth_par = 3 # on L1 so far
df.oms <- expand.grid(NAA_M_re = NAA_M_re,
Ecov_obs_sig=Ecov_obs_sig, Ecov_re_sig=Ecov_re_sig, Ecov_re_cor=Ecov_re_cor, Ecov_effect = Ecov_effect,
growth_par = growth_par,  stringsAsFactors = FALSE)
df.oms <- expand.grid(Ecov_obs_sig=Ecov_obs_sig, Ecov_re_sig=Ecov_re_sig, Ecov_re_cor=Ecov_re_cor, Ecov_effect = Ecov_effect,
growth_par = growth_par,  stringsAsFactors = FALSE)
df.oms
n.mods = dim(df.oms)[1]
df.oms$Model <- paste0("om_",1:n.mods)
df.oms <- df.oms %>% select(Model, everything()) # moves Model to first col
df.oms
saveRDS(df.oms, file.path("inputs", "df.oms.RDS"))
# OM parameters:
Ecov_obs_sig = c(0.1) # obs error variance for Ecov
Ecov_re_sig = c(0.1) # Ecov process error variance
Ecov_re_cor <- c(0) # Ecov process error autocorrelation
Ecov_effect <- c(0.5) # Effect on selected parameter (Beta)
growth_par = 1:3 # on k, Linf, and L1 separately
# Make OM df:
df.oms <- expand.grid(Ecov_obs_sig=Ecov_obs_sig, Ecov_re_sig=Ecov_re_sig, Ecov_re_cor=Ecov_re_cor, Ecov_effect = Ecov_effect,
growth_par = growth_par,  stringsAsFactors = FALSE)
n.mods = dim(df.oms)[1]
df.oms$Model <- paste0("om_",1:n.mods)
df.oms <- df.oms %>% select(Model, everything())
saveRDS(df.oms, file.path("inputs", "df.oms.RDS"))
# Create basic WHAM input:
gf_info = make_basic_info()
#selectivity pars:
gf_selectivity = list(
model = c("double-normal", "logistic"),
initial_pars = list(c(4,-1,1.5,1.4,0,0.4), c(1,0.5)))
# M pars:
gf_M = list(model = "constant",
initial_means = 0.2)
# Recruitment pars:
gf_NAA_re = list(N1_pars = c(1e+05, 0),
sigma = "rec", #random about mean
cor = "iid", #random effects are independent
recruit_model = 2,
N1_model = 1) #defined above from naa_om_inputs
gf_NAA_re
df.oms
# Ecov pars:
gf_ecov <- list(
label = "Ecov",
process_model = "ar1",
lag = 0,
mean = cbind(rep(0, length(gf_info$years))),
year = gf_info$years,
ages = list(1:10),
use_obs = cbind(rep(1, length(gf_info$years))),
where = list('growth'),
)
# Ecov pars:
gf_ecov <- list(
label = "Ecov",
process_model = "ar1",
lag = 0,
mean = cbind(rep(0, length(gf_info$years))),
year = gf_info$years,
ages = list(1:10),
use_obs = cbind(rep(1, length(gf_info$years))),
where = list('growth')
)
#  Growth configuration:
Linf <- 85
k <- 0.3
t0 <- 0
a_LW <- exp(-12.1)
b_LW <- 3.2
L_a <- Linf*(1-exp(-k*(1:10 - t0)))
W_a <- a_LW*L_a^b_LW
CV_a <- .1
CV_a
W_a
L_a
#  Growth configuration:
Linf <- 85
k <- 0.3
t0 <- 0
a_LW <- exp(-12.1)
b_LW <- 3.2
L_a <- Linf*(1-exp(-k*(1:10 - t0)))
W_a <- a_LW*L_a^b_LW
CV_a <- .1
gf_growth <- list(model='vB_classic', init_vals=c(k, Linf, L_a[1]),
SD_vals=c(CV_a*L_a[1], CV_a*L_a[10]))
#  Growth configuration:
Linf <- 85
k <- 0.2
t0 <- 0
a_LW <- exp(-12.1)
b_LW <- 3.2
L_a <- Linf*(1-exp(-k*(1:10 - t0)))
W_a <- a_LW*L_a^b_LW
CV_a <- .1
gf_growth <- list(model='vB_classic', init_vals=c(k, Linf, L_a[1]),
SD_vals=c(CV_a*L_a[1], CV_a*L_a[10]))
L_a
#  Growth configuration:
Linf <- 85
k <- 0.2
t0 <- 0
a_LW <- exp(-12.1)
b_LW <- 3.2
L_a <- Linf*(1-exp(-k*(1:10 - t0)))
W_a <- a_LW*L_a^b_LW
CV_a <- .1
gf_growth <- list(model='vB_classic', init_vals=c(k, Linf, L_a[1]),
SD_vals=c(CV_a*L_a[1], CV_a*L_a[10]))
gf_LW <- list(init_vals=c(a_LW, b_LW))
# Create Beta array:
beta_vals <- list(rep(list(matrix(0,1,length(gf_info$ages))), 7)) # R, M, Q, + 4
beta_vals
# Make OMs --------------------------------------------------------------
om_inputs = list()
i = 1
# Print model name:
print(paste0("row ", i))
# Recruitment information:
NAA_re = gf_NAA_re
# Natural mortality:
M_i = gf_M
# Add more information to Ecov:
ecov_i = gf_ecov
ecov_i$logsigma = cbind(rep(log(df.oms$Ecov_obs_sig[i]), length(ecov_i$year)))
ecov_i$logsigma
# Ecov pars:
gf_ecov <- list(
label = "Ecov",
process_model = "ar1",
lag = 0,
mean = cbind(rep(0, length(gf_info$years))),
year = gf_info$years,
ages = list(1:10),
use_obs = cbind(rep(1, length(gf_info$years))),
)
# Ecov pars:
gf_ecov <- list(
label = "Ecov",
process_model = "ar1",
lag = 0,
mean = cbind(rep(0, length(gf_info$years))),
year = gf_info$years,
ages = list(1:10),
use_obs = cbind(rep(1, length(gf_info$years)))
)
# Q pars:
gf_Q = list(initial_q = 1,
q_lower = c(0),
q_upper = c(10), prior_sd = c(NA))
source(file.path('code', "make_om.R"))
debug(make_om)
om_inputs[[i]] <- make_om(selectivity = gf_selectivity,
M = gf_M, NAA_re = gf_NAA_re, ecov = ecov_i,
growth = gf_growth, LW = gf_LW,
catchability = gf_Q,
age_comp = "logistic-normal-miss0",
om_input = TRUE, df.oms = df.oms[i,])
i  = 1
# Print model name:
print(paste0("row ", i))
# Add more information to Ecov:
ecov_i = gf_ecov
ecov_i$logsigma = cbind(rep(log(df.oms$Ecov_obs_sig[i]), length(ecov_i$year)))
if(df.oms$Ecov_effect[i] < 1e-7){
ecov_i$how = 0
ecov_i$where = "none"
} else {
ecov_i$how = 1
ecov_i$where = "growth"
ecov_i$where_subindex = df.oms$growth_par[i]
}
om_inputs[[i]] <- make_om(selectivity = gf_selectivity,
M = gf_M, NAA_re = gf_NAA_re, ecov = ecov_i,
growth = gf_growth, LW = gf_LW,
catchability = gf_Q,
age_comp = "logistic-normal-miss0",
om_input = TRUE, df.oms = df.oms[i,])
input$data$FXSPR_init
input$data$FMSY_init
source(file.path('code', "make_om.R"))
om_inputs[[i]] <- make_om(selectivity = gf_selectivity,
M = gf_M, NAA_re = gf_NAA_re, ecov = ecov_i,
growth = gf_growth, LW = gf_LW,
catchability = gf_Q,
age_comp = "logistic-normal-miss0",
om_input = TRUE, df.oms = df.oms[i,])
source(file.path('code', "make_om.R"))
debug(make_om)
om_inputs[[i]] <- make_om(selectivity = gf_selectivity,
M = gf_M, NAA_re = gf_NAA_re, ecov = ecov_i,
growth = gf_growth, LW = gf_LW,
catchability = gf_Q,
age_comp = "logistic-normal-miss0",
om_input = TRUE, df.oms = df.oms[i,])
# Load required libraries
library(tidyr)
library(dplyr)
library(here)
library(ggplot2)
library(wham)
