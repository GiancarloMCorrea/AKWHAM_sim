class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 10
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 11
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 12
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 13
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 14
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 15
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 16
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 17
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 18
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 19
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 20
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 21
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 22
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 23
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 24
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
all_names
i = 22
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
i = 1
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 2
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 3
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 4
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 5
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 6
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 7
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 8
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 9
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 10
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
i = 11
all_names[i]
class(EM_input2$data[[all_names[i]]])
class(EM_input$data[[all_names[i]]])
EM_input2$data[all_names[i]]
EM_input$data[all_names[i]]
dim(EM_input2$data[[all_names[i]]])
dim(EM_input$data[[all_names[i]]])
length(EM_input)
length(EM_input2)
length(EM_input$data)
length(EM_input2$data)
length(EM_input$par)
length(EM_input2$par)
length(EM_input$map)
length(EM_input2$map)
EM_input$data$simulate_process
EM_input$data$simulate_state
EM_input$data$simulate_process[] = as.integer(FALSE)
EM_input$data$simulate_process
as.integer(TRUE)
as.integer(FALSE)
xa = as.integer(FALSE)
EM_input$data$simulate_data
EM_input$data$simulate_data[] = xa
EM_input$data$simulate_data
EM_input$data$bias_correct_oe
# Clear workspace
rm(list=ls())
# Clear workspace
rm(list=ls())
# Load required libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(wham)
library(snowfall)
# Set working directory:
setwd("~/GitHub/AKWHAM_sim")
# Create Scenario DF:
source(file.path("code", "config_scenarios.R"))
## Make OM and EM WHAM inputs
source(file.path("code", "om_setup.R"))
source(file.path("code", "em_setup.R"))
# Clear workspace
rm(list=ls())
# Read OM and EM data frames
df.scenario = readRDS(file.path("inputs", "df.scenarios.RDS"))
simi = 1
scenj = 7
# Main directory:
main_dir = 'C:/Users/moroncog/Documents/GitHub/AKWHAM_sim'
# Load required libraries:
library(wham)
source(file.path(main_dir, "code", "make_om_plots.R"))
# Read inputs:
om_inputs <- readRDS(file.path(main_dir, "inputs", "om_inputs.RDS"))
em_inputs <- readRDS(file.path(main_dir, "inputs", "em_inputs.RDS"))
df.scenario <- readRDS(file.path(main_dir, "inputs", "df.scenarios.RDS"))
# Make data.frame summarizing scenario:
this_scenario <- data.frame(df.scenario[scenj, ])
model <- cbind(im = simi, scenario = scenj, optimized=FALSE, sdreport=FALSE, this_scenario)
# Select observations to pass to EM from sim_data:
# DO NOT PASS 'use_xxx_xxx'
obs_names <- c("agg_catch", "agg_indices", "catch_paa", "index_paa", "catch_pal", "index_pal",
'catch_caal', 'index_caal', 'waa', 'Ecov_obs', "obsvec", "agesvec")
#######################################################
# Read seed:
# I don't think we want to use the same (e.g. 1000) seeds for everything.
seeds <- readRDS(file.path(main_dir, "inputs","seeds.RDS"))
# Print scenario name:
cat(paste0("START Scenario: ", scenj, " Sim: ", simi, "\n"))
# Create folder to save results:
write.dir <- file.path(main_dir, "results", paste0("scenario", scenj))
dir.create(write.dir, recursive = T, showWarnings = FALSE)
#######################################################
# Run OM:
om <- fit_wham(om_inputs[[scenj]], do.fit = FALSE, MakeADFun.silent = TRUE)
# Define seed:
# TODO: use same seeds based on OM?
set.seed(seeds[[scenj]][simi])
# Simulate data:
sim_data <- om$simulate(complete=TRUE)
if(simi == 1) make_plot_om(sim_data, scenj, main_dir) # Make plot
truth <- sim_data
# Save the version for reproducibility
truth$wham_version = om$wham_version
# Read EM input data:
EM_input <- em_inputs[[scenj]]
EM_input$data$simulate_data
EM_input$data$simulate_data
EM_input$data$simulate_state
EM_input$data$simulate_period
# Read EM input data:
EM_input <- em_inputs[[scenj]]
# Put simulated data into EM input:
# it is important to pass keep names since 'obsvec' is being passed and OM simulates data for all categories:
keep_names = names(sim_data)[grep(pattern = 'keep', x = names(sim_data))]
# Pass names:
EM_input$data[c(obs_names, keep_names)] = sim_data[c(obs_names, keep_names)]
xa = fit_wham(EM_input, do.fit = F)
# Read EM input data:
EM_input <- em_inputs[[scenj]]
xa = fit_wham(EM_input, do.fit = F)
# Read EM input data:
EM_input <- em_inputs[[scenj]]
sim_data$obs$type
unique(sim_data$obs$type)
EM_input$data$obs$type
unique(EM_input$data$obs$type)
unique(sim_data$obs$type)
EM_input$data$use_catch_paa
EM_input$data$use_index_paa
EM_input$data$use_catch_pal
EM_input$data$use_index_pal
EM_input$data$use_catch_pal
EM_input$data$use_index_pal
EM_input$data$use_catch_paa
unique(sim_data$obs$type)
df.scenario[scenj]
df.scenario[scenj,]
unique(sim_data$obs$type)
setwd("~/GitHub/AKWHAM_sim/code")
# Clear workspace
rm(list=ls())
# Load required libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(wham)
library(snowfall)
# Set working directory:
setwd("~/GitHub/AKWHAM_sim")
# Create Scenario DF:
source(file.path("code", "config_scenarios.R"))
## Make OM and EM WHAM inputs
source(file.path("code", "om_setup.R"))
source(file.path("code", "em_setup.R"))
# Clear workspace
rm(list=ls())
# Read OM and EM data frames
df.scenario = readRDS(file.path("inputs", "df.scenarios.RDS"))
simi = 1
scenj = 7
# Main directory:
main_dir = 'C:/Users/moroncog/Documents/GitHub/AKWHAM_sim'
# Load required libraries:
library(wham)
source(file.path(main_dir, "code", "make_om_plots.R"))
# Read inputs:
om_inputs <- readRDS(file.path(main_dir, "inputs", "om_inputs.RDS"))
em_inputs <- readRDS(file.path(main_dir, "inputs", "em_inputs.RDS"))
df.scenario <- readRDS(file.path(main_dir, "inputs", "df.scenarios.RDS"))
# Make data.frame summarizing scenario:
this_scenario <- data.frame(df.scenario[scenj, ])
model <- cbind(im = simi, scenario = scenj, optimized=FALSE, sdreport=FALSE, this_scenario)
# Select observations to pass to EM from sim_data:
# DO NOT PASS 'use_xxx_xxx'
obs_names <- c("agg_catch", "agg_indices", "catch_paa", "index_paa", "catch_pal", "index_pal",
'catch_caal', 'index_caal', 'waa', 'Ecov_obs', "obsvec", "agesvec")
#######################################################
# Read seed:
# I don't think we want to use the same (e.g. 1000) seeds for everything.
seeds <- readRDS(file.path(main_dir, "inputs","seeds.RDS"))
# Print scenario name:
cat(paste0("START Scenario: ", scenj, " Sim: ", simi, "\n"))
# Create folder to save results:
write.dir <- file.path(main_dir, "results", paste0("scenario", scenj))
dir.create(write.dir, recursive = T, showWarnings = FALSE)
#######################################################
# Run OM:
om <- fit_wham(om_inputs[[scenj]], do.fit = FALSE, MakeADFun.silent = TRUE)
# Define seed:
# TODO: use same seeds based on OM?
set.seed(seeds[[scenj]][simi])
# Simulate data:
sim_data <- om$simulate(complete=TRUE)
if(simi == 1) make_plot_om(sim_data, scenj, main_dir) # Make plot
truth <- sim_data
# Save the version for reproducibility
truth$wham_version = om$wham_version
# Read EM input data:
EM_input <- em_inputs[[scenj]]
# Put simulated data into EM input:
# it is important to pass keep names since 'obsvec' is being passed and OM simulates data for all categories:
keep_names = names(sim_data)[grep(pattern = 'keep', x = names(sim_data))]
# Pass names:
EM_input$data[c(obs_names, keep_names)] = sim_data[c(obs_names, keep_names)]
xa = fit_wham(EM_input, do.fit = F)
df.scenario
scenj = 19
# Main directory:
main_dir = 'C:/Users/moroncog/Documents/GitHub/AKWHAM_sim'
# Load required libraries:
library(wham)
source(file.path(main_dir, "code", "make_om_plots.R"))
# Read inputs:
om_inputs <- readRDS(file.path(main_dir, "inputs", "om_inputs.RDS"))
em_inputs <- readRDS(file.path(main_dir, "inputs", "em_inputs.RDS"))
df.scenario <- readRDS(file.path(main_dir, "inputs", "df.scenarios.RDS"))
# Make data.frame summarizing scenario:
this_scenario <- data.frame(df.scenario[scenj, ])
model <- cbind(im = simi, scenario = scenj, optimized=FALSE, sdreport=FALSE, this_scenario)
# Select observations to pass to EM from sim_data:
# DO NOT PASS 'use_xxx_xxx'
obs_names <- c("agg_catch", "agg_indices", "catch_paa", "index_paa", "catch_pal", "index_pal",
'catch_caal', 'index_caal', 'waa', 'Ecov_obs', "obsvec", "agesvec")
#######################################################
# Read seed:
# I don't think we want to use the same (e.g. 1000) seeds for everything.
seeds <- readRDS(file.path(main_dir, "inputs","seeds.RDS"))
# Print scenario name:
cat(paste0("START Scenario: ", scenj, " Sim: ", simi, "\n"))
# Create folder to save results:
write.dir <- file.path(main_dir, "results", paste0("scenario", scenj))
dir.create(write.dir, recursive = T, showWarnings = FALSE)
#######################################################
# Run OM:
om <- fit_wham(om_inputs[[scenj]], do.fit = FALSE, MakeADFun.silent = TRUE)
# Define seed:
# TODO: use same seeds based on OM?
set.seed(seeds[[scenj]][simi])
# Simulate data:
sim_data <- om$simulate(complete=TRUE)
if(simi == 1) make_plot_om(sim_data, scenj, main_dir) # Make plot
truth <- sim_data
# Save the version for reproducibility
truth$wham_version = om$wham_version
# Read EM input data:
EM_input <- em_inputs[[scenj]]
# Put simulated data into EM input:
# it is important to pass keep names since 'obsvec' is being passed and OM simulates data for all categories:
keep_names = names(sim_data)[grep(pattern = 'keep', x = names(sim_data))]
# Pass names:
EM_input$data[c(obs_names, keep_names)] = sim_data[c(obs_names, keep_names)]
# Create data.frame saving parameter names:
ompars <- data.frame(par=names(om$par), value=om$par) |> dplyr::filter(par!='F_devs')
ompars$par2 <- sapply(unique(ompars$par), function(x) {
y <- which(ompars$par==x)
if(length(y)==1) return(x)
x <- paste(x, 1:length(y), sep='_')
return(x)
}) %>% unlist
res <- list(truth = truth, model = model, ompars = ompars)
res$fit <- list()
xa = fit_wham(EM_input, do.fit = F)
EM_input$random
paste0("scenario", scenj)
setwd("~/GitHub/AKWHAM_sim/code")
# Clear workspace
rm(list=ls())
# Load required libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(wham)
library(snowfall)
# Set working directory:
setwd("~/GitHub/AKWHAM_sim")
# Create Scenario DF:
source(file.path("code", "config_scenarios.R"))
## Make OM and EM WHAM inputs
source(file.path("code", "om_setup.R"))
source(file.path("code", "em_setup.R"))
# Clear workspace
rm(list=ls())
# Read OM and EM data frames
df.scenario = readRDS(file.path("inputs", "df.scenarios.RDS"))
# Run in parallel several simulations for all EM and OM
sfInit(parallel=TRUE, cpus=10)
sfExportAll()
for(sc in 1:nrow(df.scenario)){
sfExportAll()
trash <- sfLapply(1:20, function(sim) run_iter(sim, sc))
}
run_iter <- function(sim, scen){
cmd <- paste("Rscript --vanilla code/sim_core.R", sim, scen)
system(cmd)
}
sfStop()
# Run in parallel several simulations for all EM and OM
sfInit(parallel=TRUE, cpus=10)
sfExportAll()
for(sc in 1:nrow(df.scenario)){
sfExportAll()
trash <- sfLapply(1:20, function(sim) run_iter(sim, sc))
}
sfStop()
setwd("~/GitHub/AKWHAM_sim")
## Cole made this custom file to quickly look at results for
## R&D. Note the script to run things has modified code w/ what
## to return
library(ggplot2)
library(dplyr)
library(tidyr)
theme_set(theme_bw())
# Clean workspace
rm(list = ls())
# Call aux functions
source('aux_functions.R')
# Read outputs rds and save them:
# WARNING: this could take up to hours depending on the number of scenarios and replicates
# fits = list.files('results', pattern='RDS', recursive=1, full.names=TRUE) %>% lapply(readRDS)
# saveRDS(fits, 'results/fits.RDS')
# Temp result:
xa = readRDS('results/scenario1/sim1.RDS')
xa$model
xa$ompars
xa$empars
exp(11.51292546)
xa$fit$opt
xa$fit$final_gradient
xa$fit$TMB_version
xa$fit$rep$WAA_a
xa = readRDS('results/scenario7/sim3.RDS')
xa$fit$opt
xa$fit$rep$LAA
plot(xa$fit$rep$LAA[,2])
plot(xa$fit$rep$LAA[,2], type = 'l')
xa = readRDS('results/scenario7/sim4.RDS')
xa$fit
xa = readRDS('results/scenario7/sim3.RDS')
xa$model$optimized
xa = readRDS('results/scenario7/sim4.RDS')
xa$model$optimized
xa$model$sdreport
xa = readRDS('results/scenario9/sim2.RDS')
plot(xa$fit$rep$LAA[,2], type = 'l')
plot(xa$fit$rep$LAA[,1], type = 'l')
xa = readRDS('results/scenario9/sim3.RDS')
xa$fit$rep$LAA
eminput = readRDS('inputs/em_inputs.RDS')
eminput
length(eminput)
eminput[[9]]
eminput[[9]]$data$use_index_paa
eminput[[9]]$data$use_index_pal
eminput[[9]]$data$use_catch_paa
eminput[[9]]$data$use_catch_pal
eminput[[9]]$data$Ecov_use_obs
eminput[[9]]$map
eminput[[9]]$map$growth_re
eminput[[9]]$par$growth_a
eminput[[9]]$par$growth_re
eminput[[9]]$par$growth_repars
eminput[[9]]$data$growth_re_model
eminput[[7]]$data$growth_re_model
eminput[[8]]$data$growth_re_model
eminput[[9]]$data$growth_re_model
eminput[[10]]$data$growth_re_model
eminput[[11]]$data$growth_re_model
eminput[[12]]$data$growth_re_model
eminput[[22]]$data$Ecov_use_obs
eminput[[22]]$par$Ecov_beta
eminput[[22]]$map$Ecov_beta
eminput[[22]]$par$growth_a
eminput[[22]]$map$growth_a
eminput[[22]]$map$growth_re
eminput[[22]]$data$Ecov_where_subindex
eminput[[23]]$data$Ecov_where_subindex
eminput[[24]]$data$Ecov_where_subindex
